diff -r 645f4de26f99 app/soc/logic/models/survey.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/app/soc/logic/models/survey.py	Wed Jun 24 08:46:50 2009 -0700
@@ -0,0 +1,444 @@
+#!/usr/bin/python2.5
+#
+# Copyright 2009 the Melange authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Survey (Model) query functions.
+"""
+
+__authors__ = [
+  '"Daniel Diniz" <ajaksu@gmail.com>',
+  '"James Levy" <jamesalexanderlevy@gmail.com>',
+  ]
+
+import logging
+
+from google.appengine.ext import db
+
+import soc.models.student_project
+
+from soc.cache import sidebar
+from soc.logic.models import work
+from soc.logic.models import linkable as linkable_logic
+from soc.models.program import Program
+from soc.models.survey import SurveyContent, Survey
+from soc.models.survey_record import SurveyRecord, SurveyRecordGroup
+from soc.models.work import Work
+from soc.logic.models.news_feed import logic as newsfeed_logic
+from soc.logic.models.user import logic as user_logic
+
+
+GRADES = {'pass': True, 'fail': False}
+PROJECT_STATUSES = {
+'accepted': {True: 'mid_term_passed', False: 'mid_term_failed'}, 
+'mid_term_passed': {True: 'passed', False: 'final_failed'} 
+}
+
+class Logic(work.Logic):
+  """Logic methods for the Survey model.
+  """
+
+  def __init__(self, model=Survey, base_model=Work,
+               scope_logic=linkable_logic):
+    """Defines the name, key_name and model for this entity.
+    """
+
+    super(Logic, self).__init__(model=model, base_model=base_model,
+                                scope_logic=scope_logic)
+
+  def createSurvey(self, survey_fields, schema, survey_content=False):
+    """Create a new survey from prototype.
+    """
+
+    if not survey_content:
+      survey_content = SurveyContent()
+    else:
+      # wipe clean existing dynamic properties if they exist
+      for prop in survey_content.dynamic_properties():
+        delattr(survey_content, prop)
+    for name, value in survey_fields.items():
+      setattr(survey_content, name, value)
+    survey_content.schema = str(schema)
+    db.put(survey_content)
+    return survey_content
+
+  def updateSurveyRecord(self, user, survey, survey_record, fields):
+    """ Create a new survey record, or get an existing one.
+    """
+
+    if survey_record:
+      create = False
+      for prop in survey_record.dynamic_properties():
+        delattr(survey_record, prop)
+    else:
+      create = True 
+      survey_record = SurveyRecord(user=user, survey=survey)
+    schema = eval(survey.survey_content.schema)
+    for name, value in fields.items():
+      if name == 'project':
+        project = soc.models.student_project.StudentProject.get(value)
+        survey_record.project = project
+      elif name == 'grade':
+        survey_record.grade = GRADES[value]
+      else:
+        pick_multi = name in schema and schema[name]['type'] == 'pick_multi'
+        if pick_multi and hasattr(fields, 'getlist'): # it's a multidict
+          setattr(survey_record, name, ','.join(fields.getlist(name)))
+        else:
+          setattr(survey_record, name, value)
+    # if creating evaluation record, set SurveyRecordGroup
+    db.put(survey_record)
+    if 'evaluation' in survey.taking_access and create:
+      if not project: return False
+      role = self.getUserRole(user, survey, project)
+      survey_record_group = self.setSurveyRecordGroup(role, survey,
+      survey_record, project)
+      if survey_record_group:  db.put(survey_record_group)
+    return survey_record
+
+
+  def setSurveyRecordGroup(self, role, survey, survey_record, project):
+    """ First looks for an existing SurveyRecordGroup, using the 
+    project and its current status as a filter. 
+    
+    IOW SurveyRecordGroup cannot consist of surveys taken with 
+    two different statuses.
+    
+    This means that a student cannot take a survey after the mentor
+    has taken the accompanying survey and the project has since 
+    changed. (Assuming we want this strict behavior)
+    """
+    group_query = SurveyRecordGroup.all(
+    ).filter("project = ", project
+    ).filter("initial_status = ", project.status
+    )
+    if survey.taking_access == 'mentor evaluation':
+      survey_record_group = group_query.filter(
+      "mentor = ", None ).get()
+    if survey.taking_access == 'student evaluation':
+      survey_record_group = group_query.filter(
+      "student = ", None ).get()
+    if not survey_record_group:
+      #create Survey Record Group if it doesn't already exist
+      survey_record_group = SurveyRecordGroup(
+      project=project,
+      initial_status = project.status
+      )
+    if survey.taking_access == 'mentor evaluation':
+      survey_record_group.mentor_record = survey_record
+    if survey.taking_access == 'student evaluation':
+      survey_record_group.student_record = survey_record
+    return survey_record_group
+          
+  def getUserRole(self, user, survey, project):
+    """ gets the role of a user for a project, used for SurveyRecordGroup 
+    """
+    if survey.taking_access == 'mentor evaluation':
+      mentors = self.getMentorforProject(user, project)
+      if len(mentors) < 1 or len(mentors) > 1: 
+        logging.warning('Unable to determine mentor for \
+        user %s. Results returned: %s ' % (
+        user.key().name(), str(mentors)) )
+        return False
+      this_mentor = mentors[0]
+    if survey.taking_access == 'student evaluation': 
+      students = self.getStudentforProject(user, project)
+      if len(students) < 1 or len(students) > 1: 
+        logging.warning('Unable to determine student for \
+        user %s. Results returned: %s ' % (
+        user.key().name(), str(students)) )
+        return False
+      this_student = students[0]
+      
+      
+  def getStudentforProject(self, user, project):
+      import soc.models.student
+      from soc.logic.models.student import logic as student_logic
+      user_students = student_logic.getForFields({'user': user}) # status=active?
+      if not user_students: return []
+      return set([project.student for project in sum((list(s.student_projects.run()
+      ) for s in user_students), []
+      ) if project.key() == project.key()])
+
+  def getMentorforProject(self, user, project):
+      import soc.models.mentor
+      from soc.logic.models.mentor import logic as mentor_logic
+      user_mentors = mentor_logic.getForFields({'user': user}) # program = program  # status=active?
+      if not user_mentors: return []
+      return set([project.mentor for project in sum((list(mentor.student_projects.run()
+      ) for mentor in user_mentors), []
+       ) if project.key() == project.key()])
+            
+    
+      
+  def activateGrades(self, survey):
+    """ Gets survey key name from a request path
+    """
+    if survey.taking_access != "mentor evaluation":
+      logging.error("Cannot activate grades for survey %s with taking access %s" 
+      % (survey.key().name(), survey.taking_access))
+      return False 
+    program = survey.scope
+    for project in program.student_projects.fetch(1000):
+      this_record_group = SurveyRecordGroup.all().filter(
+      "project = ", project).filter(
+      "initial_status = ", project.status).get()
+      if not this_record_group:
+         logging.warning('neither mentor nor student has \
+         taken the survey for project %s' % project.key().name() )
+         continue
+      if not this_record_group.mentor_record:
+        # student has taken survey, but not mentor
+        logging.warning('not continuing without mentor record...')
+        continue
+      status_options = PROJECT_STATUSES.get(project.status)
+      if not status_options:
+        logging.warning('unable to find status options for project \
+        status %s' % project.status)
+        continue
+      new_project_grade = this_record_group.mentor_record.grade
+      new_project_status = status_options.get(new_project_grade)
+      if getattr(this_record_group, 'final_status'):
+         logging.warning('project %s record group should not \
+         yet have a final status %s' % (
+         project.key().name(), this_record_group.final_status ) )
+         continue      
+      
+      # assign the new status to the project and surveyrecordgroup
+      project.status = new_project_status
+      this_record_group.final_status = new_project_status
+      
+      
+      
+       
+      
+      
+      
+     
+    
+      
+  def getKeyNameFromPath(self, path):
+    """ Gets survey key name from a request path
+    """
+    return '/'.join(path.split('/')[-4:]).split('?')[0]
+
+
+  def getProjects(self, survey, user):
+    """
+    Get projects linking user to a program.
+    Serves as access handler (since no projects == no access)
+    And retrieves projects to choose from (if mentors have >1 projects)
+
+    """
+    this_program = survey.scope
+    from soc.logic.system import getMelangeVersion
+    # just for testing purposes
+    if getMelangeVersion() == 'devvin':
+      user = self.getDebugUser(survey, this_program)
+      logging.info(str(user.__dict__))
+    if 'mentor' in survey.taking_access:
+      these_projects = self.getMentorProjects(user, this_program)
+    if 'student' in survey.taking_access:
+      these_projects = self.getStudentProjects(user, this_program)
+    logging.info(these_projects)
+    if len(these_projects) == 0:
+      return False
+    return these_projects
+
+  def getDebugUser(self, survey, this_program):
+    # impersonate another user, for debugging
+    if 'mentor' in survey.taking_access:
+      from soc.models.mentor import Mentor
+      role = Mentor.get_by_key_name(
+      this_program.key().name() + "/org_1/test")
+
+    if 'student' in survey.taking_access:
+      from soc.models.student import Student
+      role = Student.get_by_key_name(
+      this_program.key().name() + "/test")
+    if role: return role.user
+
+  def getStudentProjects(self, user, program):
+      import soc.models.student
+      from soc.logic.models.student import logic as student_logic
+      user_students = student_logic.getForFields({'user': user}) # status=active?
+      if not user_students: return []
+      return [project for project in sum((list(u.student_projects.run()
+      ) for u in user_students), []
+      ) if project.program.key() == program.key()]
+
+
+  def getMentorProjects(self, user, program):
+      import soc.models.mentor
+      from soc.logic.models.mentor import logic as mentor_logic
+      user_mentors = mentor_logic.getForFields({'user': user}) # program = program  # status=active?
+      if not user_mentors: return []
+      return [project for project in sum((list(u.student_projects.run()
+      ) for u in user_mentors), []
+      ) if project.program.key() == program.key()]
+
+  def getKeyValuesFromEntity(self, entity):
+    """See base.Logic.getKeyNameValues.
+    """
+
+    return [entity.prefix, entity.scope_path, entity.link_id]
+
+  def getKeyValuesFromFields(self, fields):
+    """See base.Logic.getKeyValuesFromFields.
+    """
+
+    return [fields['prefix'], fields['scope_path'], fields['link_id']]
+
+  def getKeyFieldNames(self):
+    """See base.Logic.getKeyFieldNames.
+    """
+
+    return ['prefix', 'scope_path', 'link_id']
+
+  def isDeletable(self, entity):
+    """See base.Logic.isDeletable.
+    """
+
+    return True
+
+  def _updateField(self, entity, entity_properties, name):
+    """Special logic for role.
+
+    If state changes to active we flush the sidebar.
+    """
+
+    value = entity_properties[name]
+    if (name == 'is_featured') and (entity.is_featured != value):
+      sidebar.flush()
+    return True
+
+
+  def getScope(self, entity):
+    """gets Scope for entity
+    """
+    if getattr(entity, 'scope', None): return entity.scope
+    import soc.models.program
+    import soc.models.organization
+    import soc.models.user
+    import soc.models.site
+    # anything else?
+    # use prefix to generate dict key
+    scope_types = {"program": soc.models.program.Program,
+    "org": soc.models.organization.Organization,
+    "user": soc.models.user.User,
+    "site": soc.models.site.Site}
+    scope_type = scope_types.get(entity.prefix)
+    if not scope_type: raise AttributeError
+    entity.scope = scope_type.get_by_key_name(entity.scope_path)
+    entity.put()
+    return entity.scope
+
+  def _onCreate(self, entity):
+    self.getScope(entity)
+    receivers = [entity.scope]
+    newsfeed_logic.addToFeed(entity, receivers, "created")
+
+
+  def _onUpdate(self, entity):
+    self.getScope(entity) # for older entities
+    receivers = [entity.scope]
+    newsfeed_logic.addToFeed(entity, receivers, "updated")
+
+
+  def _onDelete(self, entity):
+    receivers = [entity.scope]
+    newsfeed_logic.addToFeed(entity, receivers, "deleted")
+
+
+logic = Logic()
+
+
+
+
+class ResultsLogic(work.Logic):
+  """Logic methods for the Survey model
+  """
+
+  def __init__(self, model=SurveyRecord,
+               base_model=Work, scope_logic=linkable_logic):
+    """Defines the name, key_name and model for this entity.
+    """
+
+    super(ResultsLogic, self).__init__(model=model, base_model=base_model,
+                                scope_logic=scope_logic)
+
+  def getKeyValuesFromEntity(self, entity):
+    """See base.Logic.getKeyNameValues.
+    """
+
+    return [entity.prefix, entity.scope_path, entity.link_id]
+
+  def getKeyValuesFromFields(self, fields):
+    """See base.Logic.getKeyValuesFromFields.
+    """
+
+    return [fields['prefix'], fields['scope_path'], fields['link_id']]
+
+  def getKeyFieldNames(self):
+    """See base.Logic.getKeyFieldNames.
+    """
+
+    return ['prefix', 'scope_path', 'link_id']
+
+  def isDeletable(self, entity):
+    """See base.Logic.isDeletable.
+    """
+
+    return not entity.home_for
+
+  def _updateField(self, entity, entity_properties, name):
+    """Special logic for role. If state changes to active we flush the sidebar.
+    """
+
+    value = entity_properties[name]
+
+    if (name == 'is_featured') and (entity.is_featured != value):
+      sidebar.flush()
+
+    home_for = entity.home_for
+    if (name != 'home_for') and home_for:
+      home.flush(home_for)
+    return True
+
+
+results_logic = ResultsLogic()
+
+
+def notifyStudents(survey):
+  """POC for notification, pending mentor-project linking.
+  """
+
+  from soc.models.student import Student
+  from soc.models.program import Program
+  from soc.logic.helper import notifications
+  notify = notifications.sendNotification
+  scope = Program.get_by_key_name(survey.scope_path)
+  students = Student.gql("WHERE scope = :1", scope).run()
+  have_answered = set([rec.user.key() for rec in survey.survey_records.run()])
+  creator = survey.author
+  path = (survey.entity_type().lower(), survey.prefix,
+          survey.scope_path, survey.link_id)
+  url = "/%s/show/%s/%s/%s" % path
+  props = dict(survey_url=url, survey_title=survey.title)
+  tpl = 'soc/survey/messages/new_survey.html'
+  subject = 'New Survey: "%s"' % survey.title
+  for student in students:
+    if student.user.key() not in have_answered:
+      notify(student.user, creator, props, subject, tpl)
+
diff -r 645f4de26f99 app/soc/models/survey.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/app/soc/models/survey.py	Wed Jun 24 08:46:50 2009 -0700
@@ -0,0 +1,165 @@
+#!/usr/bin/python2.5
+#
+# Copyright 2009 the Melange authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""This module contains the Survey models.
+
+Survey describes meta-information and permissions.
+SurveyContent contains the fields (questions) and their metadata.
+"""
+
+__authors__ = [
+  '"Daniel Diniz" <ajaksu@gmail.com>',
+  '"James Levy" <jamesalexanderlevy@gmail.com>',
+]
+
+
+from google.appengine.ext import db
+
+from django.utils.translation import ugettext
+
+import soc.models.work
+
+
+class SurveyContent(db.Expando):
+  """Fields (questions) and schema representation of a Survey.
+
+  Each survey content entity consists of properties where names and default
+  values are set by the survey creator as survey fields.
+
+    schema: A dictionary (as text) storing, for each field:
+      - type
+      - index
+      - order (for choice questions)
+      - render (for choice questions)
+      - question (free form text question, used as label)
+  """
+
+  schema = db.TextProperty()
+  created = db.DateTimeProperty(auto_now_add=True)
+  modified = db.DateTimeProperty(auto_now=True)
+
+  def getSurveyOrder(self):
+    """Make survey questions always appear in the same (creation) order.
+    """
+
+    survey_order = {}
+    schema = eval(self.schema)
+    for property in self.dynamic_properties():
+      # map out the order of the survey fields
+      index = schema[property]["index"]
+      if index not in survey_order:
+        survey_order[index] = property
+      else:
+        # Handle duplicated indexes
+        survey_order[max(survey_order) + 1] = property
+    return survey_order
+
+  def orderedProperties(self):
+    """Helper for View.get_fields(), keep field order.
+    """
+
+    properties = []
+    survey_order = self.getSurveyOrder().items()
+    for position,key in survey_order:
+      properties.insert(position, key)
+    return properties
+
+
+class Survey(soc.models.work.Work):
+  """Model of a Survey.
+
+  This model describes meta-information and permissions.
+  The actual questions of the survey are contained in the SurveyContent entity.
+  """
+
+  #TODO(James) Right now, this model has several properties from Document and
+  #TODO(James) it is unclear if they are necessary.
+  #
+  #TODO(James)  The inherited scope property is used to reference to a program.
+  #TODO(James)  Would it be more clear if a 'program' property were used?
+  URL_NAME = 'survey'
+  # We should use euphemisms like "student" and "mentor" if possible
+  SURVEY_ACCESS = ['admin', 'restricted', 'member', 'user']
+
+  # These are GSoC specific, so eventually we can subclass this
+  SURVEY_TAKING_ACCESS = ['student', 
+                          'mentor',
+                          'student evaluation',
+                          'mentor evaluation',
+                          'public']
+  GRADE_OPTIONS = {'midterm':['mid_term_passed', 'mid_term_failed'],
+                   'final':['final_passed', 'final_failed'],
+                   'N/A':[] }
+  # there should be a GSoC-specific property determining
+  # whether the survey is for the midterm or the final
+
+  #: field storing the prefix of this document
+  # Should this be removed from surveys?
+  prefix = db.StringProperty(default='program', required=True,
+      choices=['site', 'club', 'sponsor', 'program', 'org', 'user'],
+      verbose_name=ugettext('Prefix'))
+  prefix.help_text = ugettext(
+      'Indicates the prefix of the survey,'
+      ' determines which access scheme is used.')
+
+  #: field storing the required access to read this document
+  read_access = db.StringProperty(default='restricted', required=True,
+      choices=SURVEY_ACCESS,
+      verbose_name=ugettext('Survey Read Access'))
+  read_access.help_text = ugettext(
+      'Indicates who can read the results of this survey.')
+
+  #: field storing the required access to write to this document
+  write_access = db.StringProperty(default='admin', required=True,
+      choices=SURVEY_ACCESS,
+      verbose_name=ugettext('Survey Write Access'))
+  write_access.help_text = ugettext(
+      'Indicates who can edit this survey.')
+
+  #: field storing the required access to write to this document
+  taking_access = db.StringProperty(default='student', required=True,
+      choices=SURVEY_TAKING_ACCESS,
+      verbose_name=ugettext('Survey Taking Access'))
+  taking_access.help_text = ugettext(
+      'Indicates who can take this survey. '
+      'Student/Mentor options are for Midterms and Finals.')
+
+  #: field storing whether a link to the survey should be featured in
+  #: the sidebar menu (and possibly elsewhere); FAQs, Terms of Service,
+  #: and the like are examples of "featured" survey
+  is_featured = db.BooleanProperty(
+      verbose_name=ugettext('Is Featured'))
+  is_featured.help_text = ugettext(
+      'Field used to indicate if a Work should be featured, for example,'
+      ' in the sidebar menu.')
+
+  # date at which the survey becomes available for taking
+  opening = db.DateTimeProperty(required=False)
+  opening.help_text = ugettext(
+      'Indicates a date before which this survey'
+      ' cannot be taken or displayed.')
+
+  # deadline for taking survey
+  # default should be one week ahead
+  deadline = db.DateTimeProperty(required=False)
+  deadline.help_text = ugettext(
+      'Indicates a date after which this survey'
+      ' cannot be taken.')
+
+
+  # this property should be named 'survey_content'
+  survey_content = db.ReferenceProperty(SurveyContent,
+                                     collection_name="survey_parent")
diff -r 645f4de26f99 app/soc/models/survey_record.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/app/soc/models/survey_record.py	Wed Jun 24 08:46:50 2009 -0700
@@ -0,0 +1,102 @@
+#!/usr/bin/python2.5
+#
+# Copyright 2009 the Melange authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""SurveyRecord represents a single Survey result.
+"""
+
+__authors__ = [
+  '"Daniel Diniz" <ajaksu@gmail.com>',
+  '"James Levy" <jamesalexanderlevy@gmail.com>',
+]
+
+
+from google.appengine.ext import db
+from django.utils.translation import ugettext
+
+import soc.models.student_project
+import soc.models.user
+
+from soc.models.survey import Survey
+
+
+class SurveyRecord(db.Expando):
+  """Record produced each time Survey is taken.
+
+  Like SurveyContent, this model includes dynamic properties
+  corresponding to the fields of the survey.
+
+  This also contains a Binary grade value that can be added/edited
+  by the administrator of the Survey.
+  """
+
+  survey = db.ReferenceProperty(Survey, collection_name="survey_records")
+  user = db.ReferenceProperty(reference_class=soc.models.user.User,
+                              required=True, collection_name="surveys_taken",
+                              verbose_name=ugettext('Created by'))
+  project = db.ReferenceProperty(soc.models.student_project.StudentProject,
+                                 collection_name="survey_records")
+  created = db.DateTimeProperty(auto_now_add=True)
+  modified = db.DateTimeProperty(auto_now=True)
+  grade = db.BooleanProperty(required=False)
+
+  def getValues(self):
+    """Method to get dynamic property values for a survey record.
+
+    Right now it gets all dynamic values, but it could also be confined to
+    the SurveyContent entity linked to the survey entity.
+    """
+    survey_order = self.survey.survey_content.getSurveyOrder()
+    values = []
+    for position, property in survey_order.items():
+        values.insert(position, getattr(self, property, None))
+    return values
+
+
+
+
+class SurveyRecordGroup(db.Expando):
+  """
+
+  Because Mentors and Students take different surveys,
+  we cannot simply link survey records by a common project and survey.
+  
+  Instead, we establish a SurveyRecordGroup.
+  
+  A SurveyRecordGroup links a group of survey records with a common
+  project, and links back to its records. 
+  
+  This entity also includes the current project_status at its creation.
+  This property is used as a filter in lookups and acts as a safeguard
+  against unpredictable behavior. 
+
+  
+  """
+  # get survey by threading through record:
+  # survey = survey_record_group.mentor_record.survey
+  mentor_record = db.ReferenceProperty(SurveyRecord, required=False,
+                              collection_name='mentor_record_groups')
+  student_record = db.ReferenceProperty(SurveyRecord, required=False,
+                              collection_name='student_record_groups')
+  project = db.ReferenceProperty(soc.models.student_project.StudentProject,
+                                collection_name="survey_record_groups",
+                                required=True)
+  initial_status = db.StringProperty(required=True)
+  final_status = db.StringProperty(required=False)
+  created = db.DateTimeProperty(auto_now_add=True)
+  modified = db.DateTimeProperty(auto_now=True)
+
+
+
